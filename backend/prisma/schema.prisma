generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  password   String
  phone      String   @unique
  createdAt  DateTime @default(now())
  firstName  String
  secondName String
  role       String   @default("user")
  cart       Cart[]
}

model Place {
  id          String   @id @default(uuid())
  name        String
  currency    String
  description String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bgImage     String?
  city        String?
  country     String?
  phone       String?
  wifi        String?
}

model Menu {
  id         String         @id @default(uuid())
  isVisible  Boolean        @default(true)
  name       String
  categories MenuCategory[]
}

model MenuCategory {
  id              String     @id @default(uuid())
  image           String?
  croppedImage    String?
  isVisible       Boolean    @default(true)
  imageCropParams Json?
  name            String
  description     String?
  menuId          String
  menu            Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  items           MenuItem[]
}

model MenuItem {
  id              String          @id @default(uuid())
  price           Float           @default(0)
  image           String?
  croppedImage    String?
  isAvailable     Boolean         @default(true)
  isVisible       Boolean         @default(true)
  imageCropParams Json?
  badge           String[]
  name            String
  description     String?
  menuCategoryId  String
  cartItem        CartItem[]
  category        MenuCategory    @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  variant         VariantOption[]
  addons          ItemAddon[]     @relation("ItemAddonToMenuItem")
}

model VariantOption {
  id         String    @id @default(uuid())
  price      Float
  title      String
  menuItemId String?
  menuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
}

model ItemAddon {
  id         String        @id @default(uuid())
  selectType SelectType
  title      String
  options    AddonOption[]
  items      MenuItem[]    @relation("ItemAddonToMenuItem")
}

model AddonOption {
  id      String    @id @default(uuid())
  price   Float
  addonId String
  title   String
  addon   ItemAddon @relation(fields: [addonId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id         String   @id @default(uuid())
  quantity   Int      @default(1)
  menuItemId String
  cartId     String
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
}

enum SelectType {
  SINGLE
  MULTI
}
